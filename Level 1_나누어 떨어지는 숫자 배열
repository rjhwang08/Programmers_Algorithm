1. 풀이1
```java
import java.util.ArrayList;
import java.util.Arrays;
class Solution {
    public int[] solution(int[] arr, int divisor) {
        int[] answer = {};
        ArrayList<Integer> list = new ArrayList<>();
        // divisor로 나눠지는 element를 ArrayList에 담기
        for(int i=0; i < arr.length; i++){
            if(arr[i]%divisor == 0)
                list.add(arr[i]);
        }
        // 나눠지는 element가 없는 경우 처리
        if(list.size() == 0)
            list.add(-1);
        // ArrayList를 배열로 옮기는 과정    
        answer = new int[list.size()];
        for(int i=0; i< list.size(); i++)
            answer[i] = list.get(i);
        Arrays.sort(answer);
        
        return answer;
    }
}
```

2. 풀이2
```java
import java.util.ArrayList;
import java.util.Collections;
class Solution {
    public int[] solution(int[] arr, int divisor) {
        int[] answer = {};
        ArrayList<Integer> list = new ArrayList<>();
        for(int i=0; i < arr.length; i++){
            if(arr[i]%divisor == 0)
                list.add(arr[i]);
        }
        if(list.size() == 0)
            list.add(-1);
        Collections.sort(list);  //ArrayList를 오름차순으로 정렬하는 방법
        return list.stream().mapToInt(i -> i).toArray();
    }
}
```

3. 다른 사람의 풀이
```java
import java.util.Arrays;

class Divisible {
    public int[] divisible(int[] array, int divisor) {
        //ret에 array에 포함된 정수중, divisor로 나누어 떨어지는 숫자를 순서대로 넣으세요.
        return Arrays.stream(array).filter(factor -> factor % divisor == 0).toArray();
    }
    // 아래는 테스트로 출력해 보기 위한 코드입니다.
    public static void main(String[] args) {
        Divisible div = new Divisible();
        int[] array = {5, 9, 7, 10};
        System.out.println( Arrays.toString( div.divisible(array, 5) ));
    }
}
```
